
import { useState, useEffect } from 'react';
import { Navigate } from 'react-router-dom';
import Header from '@/components/Header';
import PostCard from '@/components/PostCard';
import { toast } from 'sonner';
import useAuth from '@/hooks/useAuth';

interface Post {
  id: string;
  topic: string;
  tone: string;
  style: string;
  content: string;
  createdAt: string;
}

export default function Posts() {
  const { user, status } = useAuth();
  const [posts, setPosts] = useState<Post[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const fetchPosts = async () => {
      try {
        // In a real app, this would be an API call
        // For demo purposes, we'll use mock data
        setTimeout(() => {
          const mockPosts = [
            {
              id: 'post-1',
              topic: 'Remote Work Challenges',
              tone: 'Professional',
              style: 'Storytelling',
              content: 'This is a simulated LinkedIn post about remote work challenges. In a real app, this would be generated by an AI service and fetched from your database.',
              createdAt: new Date().toISOString()
            },
            {
              id: 'post-2',
              topic: 'Leadership Skills',
              tone: 'Inspirational',
              style: 'How-to',
              content: 'This is a simulated LinkedIn post about leadership skills. In a real app, this would be generated by an AI service and fetched from your database.',
              createdAt: new Date(Date.now() - 86400000).toISOString()
            }
          ];
          
          setPosts(mockPosts);
          setIsLoading(false);
        }, 1000);
      } catch (error) {
        console.error('Error fetching posts:', error);
        toast.error('Failed to load posts');
        setIsLoading(false);
      }
    };

    if (status === 'authenticated') {
      fetchPosts();
    }
  }, [status]);

  const handlePostDelete = (deletedId: string) => {
    setPosts(posts.filter(post => post.id !== deletedId));
    toast.success('Post deleted successfully');
  };

  if (status === 'unauthenticated') {
    return <Navigate to="/login" />;
  }

  if (status === 'loading' || isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-pulse">Loading...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      <div className="container pt-24 pb-10">
        <h1 className="text-3xl font-bold mb-2">My LinkedIn Posts</h1>
        <p className="text-gray-600 mb-6">
          Manage and review your previously generated LinkedIn posts
        </p>

        {posts.length === 0 ? (
          <div className="bg-white rounded-lg border-2 border-dashed p-8 text-center">
            <h3 className="text-lg font-medium mb-2">No posts yet</h3>
            <p className="text-muted-foreground">
              Generate your first LinkedIn post to see it here.
            </p>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {posts.map(post => (
              <PostCard 
                key={post.id} 
                post={post} 
                onDelete={handlePostDelete}
              />
            ))}
          </div>
        )}
      </div>
    </div>
  );
}
